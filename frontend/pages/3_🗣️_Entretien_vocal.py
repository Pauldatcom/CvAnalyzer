import streamlit as st
import streamlit.components.v1 as components
from jose import jwt
import time
from fpdf import FPDF
import io
import base64
import requests
import os
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv("LIVEKIT_API_KEY", "mykey")
api_secret = os.getenv("LIVEKIT_API_SECRET", "mysecret")
room_name = "entretiens"
livekit_url = os.getenv("LIVEKIT_URL", "ws://localhost:7880/rtc")

st.set_page_config(page_title="üñôÔ∏è Assistant vocal RH", layout="centered")
st.title("üñôÔ∏è Simulateur d‚Äôentretien vocal")



# -------------------------------------------------------------------
# Page 3 ‚Äì ¬´ Entretien vocal ¬ª
# - G√©n√®re un token JWT pour LiveKit (via generate_token.py) √† partir d‚Äôun ID utilisateur.
# - Permet de rejoindre une room vocal/vid√©o en temps r√©el (LiveKit JS SDK).
# - Enregistre le micro, envoie l‚Äôaudio au backend (/transcribe) via JavaScript fetch.
# - Backend utilise Whisper pour transcrire, Mistral pour g√©n√©rer questions/r√©ponses,
#   puis edge-tts pour synth√©tiser la r√©ponse vocale (MP3).
# - Affiche lecteur audio pour √©couter la r√©ponse, garde l‚Äôhistorique Q/R en local.


# =============================================================================
# 2) Docstring en t√™te :
#    """
#    Page 3 ‚Äì Simulateur d‚Äôentretien vocal :
#    - Input pour identifiant (identity) afin de personnaliser le JWT LiveKit.
#    - Bouton ‚ÄúG√©n√©rer le token‚Äù :
#         ‚Ä¢ Charge les variables d‚Äôenvironnement LIVEKIT_API_KEY, LIVEKIT_API_SECRET.
#         ‚Ä¢ Construit le JWT HMAC SHA256 (payload : iss, sub, roomJoin rights, exp=+1h).
#         ‚Ä¢ Envoie le contexte global (CV, offre, analyse, CV modifi√©) au backend (/context).
#    - Chargement du SDK LiveKit (livekit.umd.min.js) et JS pour join la room.
#    - Boutons ‚ÄúRejoindre la salle‚Äù & ‚ÄúQuitter la salle‚Äù :
#         ‚Ä¢ Connecte √† la room, publie le micro.
#         ‚Ä¢ StartRecording() pour r√©cup√©rer le MediaStream du micro.
#    - StartRecording / StopRecording (JS/Streamlit Bidirectionnel) :
#         ‚Ä¢ Envoie un Blob audio au endpoint FastAPI (/transcribe).
#         ‚Ä¢ R√©cup√®re JSON { audio_url:‚Ä¶, text:‚Ä¶ }.
#         ‚Ä¢ Affiche un lecteur audio HTML <audio src="‚Ä¶"> pour la r√©ponse IA.
#         ‚Ä¢ M√©morise Q/R dans st.session_state["interview_history"].
#    - Bouton ‚ÄúG√©n√©rer le compte-rendu‚Äù :
#         ‚Ä¢ Parcourt interview_history, g√©n√®re un PDF via FPDF (questions + r√©ponses).
#         ‚Ä¢ Propose st.download_button pour t√©l√©charger le PDF final.
#    """
# =============================================================================

# =============================================================================
# 3) Chargement des variables d‚Äôenvironnement :
#    - LIVEKIT_API_KEY, LIVEKIT_API_SECRET (python-dotenv).
#    - V√©rifier que la cl√© et le secret existent, sinon st.error(‚Ä¶).
# =============================================================================

# =============================================================================
# 4) G√©n√©ration du JWT LiveKit :
#    - Construire payload = { "iss": LIVEKIT_API_KEY, "sub": identity, "room": "entretiens", "exp": <timestamp> }.
#    - Utiliser jose.jwt.encode(payload, LIVEKIT_API_SECRET, algorithm="HS256").
#    - Afficher le token √† l‚Äô√©cran ou le stocker dans st.session_state["lk_token"].
#    - Appeler fetch("/context", method="POST", body=JSON.stringify({...})) pour transmettre
#      CV + offre + analyse + cv_modifi√© au backend.
# =============================================================================

# =============================================================================
# 5) Chargement du SDK LiveKit JS :
#    - components.html("""<script src="static/livekit.umd.min.js"></script> ‚Ä¶""", height=‚Ä¶)  
#    - Code JavaScript pour initialiser LiveKit Connect, rejoindre la room, surveiller participants.
# =============================================================================

# =============================================================================
# 6) Boutons d‚Äôenregistrement :
#    - ‚ÄúStart Recording‚Äù ‚Üí JS obtient MediaStream du navigateur, enregistre sur le micro.
#    - Lorsque l‚Äôutilisateur clique ‚ÄúStop Recording‚Äù ‚Üí envoie le Blob au serveur via fetch("/transcribe").
#    - R√©cup√©rer la r√©ponse JSON { audio_url, text },  
#         ‚Ä¢ Afficher la transcription texte avec st.write ou st.chat_message,
#         ‚Ä¢ Afficher le lecteur audio MP3 (st.audio(info["audio_url"])).
#    - Ajouter chaque Q/R dans st.session_state["interview_history"].
# =============================================================================

# =============================================================================
# 7) G√©n√©ration du compte-rendu PDF :
#    - √Ä la fin de l‚Äôentretien (ou sur demande), prendre interview_history (liste de dicts).
#    - Cr√©er un PDF avec FPDF :
#         ‚Ä¢ Titre ¬´ Compte‚Äêrendu d‚Äôentretien ¬ª, date/heure, nom du candidat.
#         ‚Ä¢ Lister chaque question / r√©ponse sous forme de texte.
#    - Stocker le PDF dans un tempdir local (par ex. `/tmp`),  
#      l‚Äôencode en base64 et proposer st.download_button pour le fichier.
#    - Supprimer le fichier temporaire apr√®s envoi.
# =============================================================================

# ------------------ Injection du CSS (sans bloc vide) ------------------
if os.path.exists("frontend/style.css"):
    with open("frontend/style.css", "r") as f:
        css_content = f.read()
    # Injecte le CSS complet sur une seule ligne pour √©viter un bloc Markdown vide
    st.markdown(f"<style>{css_content}</style>", unsafe_allow_html=True)
    # Cache le conteneur que Streamlit pourrait cr√©er autour de ce <style>
    st.markdown(
        "<style>[data-testid='stElementContainer']:has(style) {display: none !important;}</style>",
        unsafe_allow_html=True,
    )

# ------------------ Historique d'entretien ------------------
if "entretien_history" not in st.session_state:
    st.session_state.entretien_history = []

# ------------------ Fonction de g√©n√©ration du PDF ------------------
def generate_transcript_pdf(history):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "Compte-rendu de l'entretien vocal", ln=True, align="C")
    pdf.ln(10)
    for i, item in enumerate(history, 1):
        pdf.multi_cell(0, 10, f"{i}. Question : {item['question']}\n   R√©ponse IA : {item['reponse']}\n")
        pdf.ln(4)
    buffer = io.BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    return buffer

# ------------------ Saisie identifiant ------------------
identity = st.text_input("Identifiant (ex: candidat001)", value="candidat001")

# ------------------ G√©n√©ration du token JWT ------------------
if st.button("üé´ G√©n√©rer le token JWT"):
    payload = {
        "iss": api_key,
        "sub": identity,
        "iat": int(time.time()),
        "exp": int(time.time()) + 3600,
        "video": {"roomJoin": True, "room": room_name}
    }
    requests.post("http://localhost:8000/cleanup_temp") 
    token = jwt.encode(payload, api_secret, algorithm="HS256")
    st.session_state["livekit_token"] = token
    st.success("‚úÖ Token g√©n√©r√© et pr√™t √† l'emploi")
    try:
        requests.post("http://localhost:8000/context", json={
            "cv": st.session_state.get("cv_text", ""),
            "offer": st.session_state.get("offer_text", ""),
            "analysis": st.session_state.get("llama_analysis", ""),
            "updated": st.session_state.get("updated_cv_text", "")
        })
    except:
        st.warning("üî¥ Impossible de transmettre le contexte √† l'API.")

# ------------------ Chargement du SDK LiveKit ------------------
try:
    with open("static/livekit.umd.min.js", "r", encoding="utf-8") as f:
        sdk_js = f.read()
except:
    sdk_js = ""
    st.error("‚ùå Fichier SDK LiveKit manquant.")

# ------------------ Interface LiveKit ------------------
if "livekit_token" in st.session_state and sdk_js:
    components.html(f"""
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css' rel='stylesheet'>
    <script type="module" src="https://cdn.jsdelivr.net/npm/livekit-client/dist/livekit-client.umd.min.js"></script>

    <div class='container mt-4'>
        <div id='status' class='text-muted mb-2'>Non connect√©</div>
        <button class='btn btn-outline-primary mb-2' onclick='connectLiveKit()'>üé§ Rejoindre la salle</button>
        <div id='timer' class='fw-bold mt-3 mb-2'></div>
        <button class='btn btn-success' id='startBtn' onclick='startRecording()'>üéôÔ∏è D√©marrer</button>
        <button class='btn btn-danger mt-2' id='stopBtn' onclick='stopRecording()' style='display:none;'>‚èπÔ∏è Arr√™ter</button>
        <audio id='response-audio' controls style='display:none; margin-top: 20px;'></audio>
        <div id='mic-alert' class='alert alert-danger mt-3' style='display:none;'>üéôÔ∏è Micro non autoris√© ou erreur de permission. V√©rifiez votre navigateur.</div>
    </div>
    <script>
        let mediaRecorder;
        let audioChunks = [];
        let secondsElapsed = 0;
        let countdown;

        window.addEventListener("load", function() {{
            var client = window.LivekitClient || window.LiveKit || (window.LivekitClient && window.LivekitClient.default);
            if (!client) {{
                document.getElementById("status").innerText = "‚ùå SDK LiveKit non charg√©.";
                console.error("‚ùå LiveKit SDK non accessible.");
            }} else {{
                console.log("‚úÖ SDK LiveKit d√©tect√© :", client);
                window.clientLiveKit = client;
                LiveKitLoaded = true;
            }}
        }});

        async function connectLiveKit() {{
            try {{
                const token = "{st.session_state['livekit_token']}";
                const url = "{livekit_url}";
                console.log("üîë Token utilis√© :", token);
                console.log("üåê Connexion √† :", url);
                const room = new LivekitClient.Room();

                console.log("‚úÖ Connect√© !", room);
                document.getElementById("status").innerText = "‚úÖ Connect√© √† la salle";
            }} catch (err) {{
                console.error("‚ùå Connexion √©chou√©e :", err);
                document.getElementById("status").innerText = "‚ùå Connexion √©chou√©e : " + err.message;
            }}
        }}

        async function startRecording() {{
            try {{
                const stream = await navigator.mediaDevices.getUserMedia({{ audio: true }});
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];
                secondsElapsed = 0;
                document.getElementById("startBtn").style.display = "none";
                document.getElementById("stopBtn").style.display = "inline-block";
                countdown = setInterval(() => {{
                    secondsElapsed++;
                    document.getElementById("timer").innerText = `üé§ Enregistrement : ${{secondsElapsed}}s...`;
                }}, 1000);
                mediaRecorder.ondataavailable = event => {{
                    if (event.data.size > 0) audioChunks.push(event.data);
                }};
                mediaRecorder.onstop = async () => {{
                    clearInterval(countdown);
                    document.getElementById("timer").innerText = "‚èπÔ∏è Traitement...";
                    const audioBlob = new Blob(audioChunks, {{ type: 'audio/wav' }});
                    const formData = new FormData();
                    formData.append("audio", audioBlob, "voice.wav");
                    try {{
                        const response = await fetch("http://localhost:8000/transcribe", {{ method: "POST", body: formData }});
                        const result = await response.json();
                        const audioUrl = result.audio_url;
                        const audioPlayer = document.getElementById("response-audio");
                        audioPlayer.src = audioUrl;
                        audioPlayer.style.display = "block";
                        audioPlayer.play();
                    }} catch (error) {{
                        document.getElementById("mic-alert").innerText = "‚ùå Erreur de traitement ou serveur indisponible.";
                        document.getElementById("mic-alert").style.display = "block";
                    }}
                    document.getElementById("timer").innerText = "";
                    document.getElementById("startBtn").style.display = "inline-block";
                    document.getElementById("stopBtn").style.display = "none";
                }};
                mediaRecorder.start();
            }} catch (err) {{
                document.getElementById("mic-alert").style.display = "block";
            }}
        }}

        function stopRecording() {{
            if (mediaRecorder && mediaRecorder.state === "recording") mediaRecorder.stop();
        }}
    </script>
    """, height=600)

# ------------------ Bouton pour voir le compte-rendu ------------------
if st.button("üóûÔ∏è Voir le compte-rendu de l'entretien"):
    st.markdown("### Compte-rendu de la session")
    for i, pair in enumerate(st.session_state.entretien_history, 1):
        st.markdown(f"**{i}.** üé§ *{pair['question']}*")
        st.markdown(f"   üß† *{pair['reponse']}*")
        st.markdown("---")
    pdf_file = generate_transcript_pdf(st.session_state.entretien_history)
    b64 = base64.b64encode(pdf_file.read()).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="compte_rendu_entretien.pdf">üìÑ T√©l√©charger le compte-rendu en PDF</a>'
    st.markdown(href, unsafe_allow_html=True)
